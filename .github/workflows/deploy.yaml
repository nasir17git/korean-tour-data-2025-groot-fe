name: 🏗️ Groot Frontend DEV Pipeline 

# 실행 이름: PR이벤트면 PR번호/제목 + SHA, 수동이면 브랜치+입력SHA
run-name: |
  ${{ github.event_name == 'pull_request' &&
      format('Deploy PR #{0} "{1}" / {2}',
        github.event.pull_request.number,
        github.event.pull_request.title,
        github.event.pull_request.head.sha
      )
      || format('Deploy BR {0} / {1}',
        github.ref_name,
        github.event.inputs.commit || 'latest HEAD'
      )
  }}

on:
  workflow_dispatch:
    inputs:
      commit:
        description: "8자리 short SHA (비워두면 브랜치의 최신 커밋)"
        required: false
  pull_request:
    types: [opened, synchronize, reopened]

# OIDC token permissions
permissions:
  contents: read
  pull-requests: write
  id-token: write

env:
  TARGET_EC2_TAG: 'dev'
  SERVICE_URL: 'https://fe-dev.groot.live'
  NEXT_PUBLIC_API_BASE_URL: https://be-dev.groot.live/api/v1

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
    # ✅ 공통 checkout: 이벤트별로 SHA 결정
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ github.event_name == 'pull_request' && github.event.pull_request.head.sha || github.ref }}

    # ✅ SHA 계산 (PR이면 head.sha, 수동이면 입력값 or HEAD)
    - name: Resolve commit SHA
      id: resolve_sha
      run: |
        if [ "${{ github.event_name }}" = "pull_request" ]; then
          FULL_SHA="${{ github.event.pull_request.head.sha }}"
        else
          if [ -n "${{ github.event.inputs.commit }}" ]; then
            FULL_SHA=$(git rev-parse ${{ github.event.inputs.commit }})
          else
            FULL_SHA=$(git rev-parse HEAD)
          fi
        fi
        SHORT_SHA=$(echo $FULL_SHA | cut -c1-8)
        echo "Using commit: $FULL_SHA ($SHORT_SHA)"
        echo "full_sha=$FULL_SHA" >> $GITHUB_OUTPUT
        echo "short_sha=$SHORT_SHA" >> $GITHUB_OUTPUT

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '22'
        cache: 'yarn'

    - name: Install dependencies
      run: yarn install --frozen-lockfile

    - name: Build application
      run: yarn build

    # ✅ 배포용 tar.gz 생성
    - name: Create deployment archive
      run: |
        tar -czf deploy-fe-dev.tar.gz \
          .next \
          public \
          package.json \
          yarn.lock \
          next.config.ts

    # AWS OIDC 기반 임시토큰 발급
    - name: Configure AWS credentials (OIDC)
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: arn:aws:iam::827604627136:role/groot-git
        aws-region: ap-northeast-2

    - name: Upload deploy-fe-dev.tar.gz to S3
      run: aws s3 cp deploy-fe-dev.tar.gz s3://groot-app-bucket/deploy-fe-dev.tar.gz

    - name: Find target instance-id by tag
      id: find
      run: |
        IID=$(aws ec2 describe-instances \
          --filters "Name=tag:env,Values=${{ env.TARGET_EC2_TAG }}" "Name=tag:service,Values=groot" "Name=instance-state-name,Values=running" \
          --query "Reservations[].Instances[].InstanceId" --output text)
        if [ -z "$IID" ]; then
          echo "No running instance found with tag=env=${TARGET_EC2_TAG}" >&2
          exit 1
        fi
        echo "instance_id=$IID" >> $GITHUB_OUTPUT

    - name: Send deploy command via SSM
      id: ssm
      run: |
        CMD_ID=$(aws ssm send-command \
          --instance-ids "${{ steps.find.outputs.instance_id }}" \
          --document-name "AWS-RunShellScript" \
          --comment "Deploy groot frontend dev via SSM" \
          --parameters commands='[
            "set -e",
            "sudo -u ec2-user aws s3 cp s3://groot-app-bucket/deploy-scripts/deploy-fe-dev.sh /home/ec2-user/groot/deploy-fe-dev.sh",
            "sudo -u ec2-user chmod +x /home/ec2-user/groot/deploy-fe-dev.sh",
            "sudo -u ec2-user /home/ec2-user/groot/deploy-fe-dev.sh"
            ]' \
          --query "Command.CommandId" --output text)
        echo "command_id=$CMD_ID" >> $GITHUB_OUTPUT

    - name: Wait for command to finish
      run: |
        for i in $(seq 1 60); do
          STATUS=$(aws ssm get-command-invocation \
            --command-id "${{ steps.ssm.outputs.command_id }}" \
            --instance-id "${{ steps.find.outputs.instance_id }}" \
            --query "Status" --output text || true)
          echo "SSM status: $STATUS"
          case "$STATUS" in
            Success) exit 0 ;;
            Failed|Cancelled|TimedOut) 
              echo "SSM command failed: $STATUS"
              # 실패 시 출력 내용 가져와서 마지막 10줄만 출력
              OUTPUT=$(aws ssm get-command-invocation \
                --command-id "${{ steps.ssm.outputs.command_id }}" \
                --instance-id "${{ steps.find.outputs.instance_id }}" \
                --query "StandardOutputContent" --output text || echo "No output")
              ERROR=$(aws ssm get-command-invocation \
                --command-id "${{ steps.ssm.outputs.command_id }}" \
                --instance-id "${{ steps.find.outputs.instance_id }}" \
                --query "StandardErrorContent" --output text || echo "No error")
              echo "=== COMMAND OUTPUT (last 10 lines) ==="
              echo "$OUTPUT" | tail -10
              echo "=== COMMAND ERROR (last 10 lines) ==="
              echo "$ERROR" | tail -10
              exit 1 ;;
          esac
          sleep 5
        done
        echo "Timeout waiting for SSM command" >&2
        exit 1

    # ✅ Summary 출력 (PR이벤트와 수동 둘 다 지원)
    - name: Write deployment summary
      run: |
        SHORT_SHA="${{ steps.resolve_sha.outputs.short_sha }}"
        URL="${{ env.SERVICE_URL }}"

        echo "## 🚀 프론트엔드 배포 완료" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY

        if [ "${{ github.event_name }}" = "pull_request" ]; then
          echo "| 항목 | 값 |" >> $GITHUB_STEP_SUMMARY
          echo "|------|-----|" >> $GITHUB_STEP_SUMMARY
          echo "| PR 번호 | #${{ github.event.pull_request.number }} |" >> $GITHUB_STEP_SUMMARY
          echo "| 제목 | ${{ github.event.pull_request.title }} |" >> $GITHUB_STEP_SUMMARY
          echo "| 브랜치 | ${{ github.head_ref }} |" >> $GITHUB_STEP_SUMMARY
        else
          echo "| 항목 | 값 |" >> $GITHUB_STEP_SUMMARY
          echo "|------|-----|" >> $GITHUB_STEP_SUMMARY
          echo "| 브랜치 | ${{ github.ref_name }} |" >> $GITHUB_STEP_SUMMARY
        fi

        echo "| 커밋 SHA | \`${SHORT_SHA}\` |" >> $GITHUB_STEP_SUMMARY
        echo "| 접속 URL | [${URL}](${URL}) |" >> $GITHUB_STEP_SUMMARY

    # ✅ PR 이벤트면 코멘트 작성
    - name: Comment on PR with deployed commit
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const shortSha = "${{ steps.resolve_sha.outputs.short_sha }}";
          const url = "${{ env.SERVICE_URL }}";
          const pr_number = Number("${{ github.event.pull_request.number }}");

          github.rest.issues.createComment({
            issue_number: pr_number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: `🏗️ PR **#${pr_number} (${context.payload.pull_request.head.ref})**\n커밋 \`${shortSha}\` 이(가) **dev 환경**에 배포되었습니다!\n👉 [${url}](${url})`
          });
